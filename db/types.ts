
export interface Habit {
  id: number;
  name: string;
  order: number;
  created_at?: string;
  updated_at?: string;
}

export interface HabitCompletion {
  id: number;
  habitId: number;
  completionDate: string;
  created_at?: string;
  updated_at?: string;
}

type AutoGeneratedFields = 'id' | 'created_at' | 'updated_at'
export type HabitInput = Omit<Habit, AutoGeneratedFields>
export type HabitCompletionInput = Omit<HabitCompletion, AutoGeneratedFields>

export abstract class HabitDatabaseInterface {
  // Habit operations
  abstract createHabit(habit: HabitInput): Promise<Habit>
  abstract getHabits(): Promise<Habit[]>
  abstract updateHabit(id: number, updates: Partial<HabitInput>): Promise<Habit>
  abstract reorderHabits(habits: Habit[]): Promise<Habit[]>
  abstract deleteHabit(id: number): Promise<void>

  // HabitCompletion operations
  abstract createHabitCompletion(habitCompletion: HabitCompletionInput): Promise<HabitCompletion>
  abstract getHabitCompletionsByDate(completionDate?: string): Promise<HabitCompletion[]>
  abstract getHabitCompletionsById(habitId: number): Promise<HabitCompletion[]>
  abstract deleteHabitCompletion(id: number): Promise<void>
}
